const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const nodemailer = require('nodemailer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;
const JWT_SECRET = process.env.JWT_SECRET || 'olive_store_secret_key_2024';

// ุฅุนุฏุงุฏ ุฎุฏูุฉ ุงูุฅูููู
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

// ุฏุงูุฉ ุฅุฑุณุงู ุฅูููู ุงูุทูุจ
async function sendOrderEmail(orderData) {
    try {
        const orderDate = new Date(orderData.date).toLocaleDateString('ar-EG', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });

        let itemsHtml = '';
        orderData.items.forEach((item, index) => {
            itemsHtml += `
                <tr>
                    <td style="padding: 10px; border: 1px solid #ddd;">${index + 1}</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">${item.name}</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">${item.quantity}</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">${item.price.toFixed(2)} ุฌ.ู</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">${(item.price * item.quantity).toFixed(2)} ุฌ.ู</td>
                </tr>
            `;
        });

        const paymentMethodText = {
            'cash': 'ุฏูุน ุนูุฏ ุงูุงุณุชูุงู',
            'transfer': 'ุชุญููู ุจููู',
            'whatsapp': 'ุทูุจ ุนุจุฑ ูุงุชุณุงุจ'
        };

        const emailHtml = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; direction: rtl;">
                <h2 style="color: #2c5530; text-align: center;">๐ ุทูุจ ุฌุฏูุฏ ูู ูุชุฌุฑ ุงูุฒูุชูู</h2>
                
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="color: #2c5530;">๐ ูุนูููุงุช ุงูุทูุจ</h3>
                    <p><strong>ุฑูู ุงูุทูุจ:</strong> ${orderData.id}</p>
                    <p><strong>ุชุงุฑูุฎ ุงูุทูุจ:</strong> ${orderDate}</p>
                    <p><strong>ุญุงูุฉ ุงูุทูุจ:</strong> ููุฏ ุงููุนุงูุฌุฉ</p>
                </div>

                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="color: #2c5530;">๐ค ูุนูููุงุช ุงูุนููู</h3>
                    <p><strong>ุงูุงุณู:</strong> ${orderData.customer_name}</p>
                    <p><strong>ุงููุงุชู:</strong> ${orderData.customer_phone || 'ุบูุฑ ูุญุฏุฏ'}</p>
                    <p><strong>ุนููุงู ุงูุชุณููู:</strong> ${orderData.shipping_address}</p>
                </div>

                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="color: #2c5530;">๐๏ธ ุชูุงุตูู ุงูููุชุฌุงุช</h3>
                    <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                        <thead>
                            <tr style="background-color: #2c5530; color: white;">
                                <th style="padding: 10px; border: 1px solid #ddd;">#</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">ุงุณู ุงูููุชุฌ</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">ุงููููุฉ</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">ุงูุณุนุฑ</th>
                                <th style="padding: 10px; border: 1px solid #ddd;">ุงูุฅุฌูุงูู</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                        </tbody>
                    </table>
                </div>

                <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
                    <h3 style="color: #2c5530;">๐ฐ ุงููุฌููุน ุงูุฅุฌูุงูู: ${(orderData.total_amount || orderData.total || 0).toFixed(2)} ุฌ.ู</h3>
                    <p><strong>ุทุฑููุฉ ุงูุฏูุน:</strong> ${paymentMethodText[orderData.paymentMethod] || orderData.paymentMethod}</p>
                </div>

                <div style="background-color: #fff3cd; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0; color: #856404;"><strong>ููุงุญุธุฉ:</strong> ูุฑุฌู ุงูุชูุงุตู ูุน ุงูุนููู ูู ุฃูุฑุจ ููุช ูุชุฃููุฏ ุงูุทูุจ ูุชุฑุชูุจ ุงูุชุณููู.</p>
                </div>
            </div>
        `;

        const mailOptions = {
            from: `ูุชุฌุฑ ุงูุฒูุชูู <${process.env.EMAIL_USER}>`,
            to: process.env.RECIPIENT_EMAIL || 'elagamy@internet.ru',
            subject: `ุทูุจ ุฌุฏูุฏ ุฑูู ${orderData.id} - ูุชุฌุฑ ุงูุฒูุชูู`,
            html: emailHtml
        };

        await transporter.sendMail(mailOptions);
        console.log('ุชู ุฅุฑุณุงู ุฅูููู ุงูุทูุจ ุจูุฌุงุญ ุฅูู:', process.env.RECIPIENT_EMAIL || 'elagamy@internet.ru');
        return true;
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅูููู:', error);
        return false;
    }
}

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
const db = new sqlite3.Database('./olive_store.db', (err) => {
    if (err) {
        console.error('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', err.message);
    } else {
        console.log('ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
        initializeDatabase();
    }
});

// ุฅูุดุงุก ุงูุฌุฏุงูู
function initializeDatabase() {
    // ุฌุฏูู ุงููุณุชุฎุฏููู
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        full_name TEXT NOT NULL,
        phone TEXT,
        address TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู:', err);
        else console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู');
    });

    // ุฌุฏูู ุงูููุชุฌุงุช
    db.run(`CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price REAL NOT NULL,
        image_url TEXT,
        category TEXT,
        stock_quantity INTEGER DEFAULT 0,
        origin TEXT,
        quality_grade TEXT,
        weight_kg REAL DEFAULT 10.0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุงูููุชุฌุงุช:', err);
        else {
            console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุงูููุชุฌุงุช');
            // ุฅุถุงูุฉ ุนููุฏ ุงููุฒู ุฅุฐุง ูู ููู ููุฌูุฏุงู
            db.run(`ALTER TABLE products ADD COLUMN weight_kg REAL DEFAULT 10.0`, (err) => {
                if (err && !err.message.includes('duplicate column name')) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ ุงููุฒู:', err);
                } else {
                    console.log('ุชู ุฅุถุงูุฉ ุนููุฏ ุงููุฒู');
                }
            });
        }
    });

    // ุฌุฏูู ุณูุฉ ุงูุชุณูู
    db.run(`CREATE TABLE IF NOT EXISTS cart (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product_id INTEGER,
        quantity INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (product_id) REFERENCES products (id)
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุงูุณูุฉ:', err);
        else console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุงูุณูุฉ');
    });

    // ุฌุฏูู ุงูุทูุจุงุช
    db.run(`CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        total_amount REAL NOT NULL,
        status TEXT DEFAULT 'pending',
        payment_method TEXT,
        shipping_address TEXT,
        customer_name TEXT,
        customer_phone TEXT,
        customer_email TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุงูุทูุจุงุช:', err);
        else {
            console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุงูุทูุจุงุช');
            // ุฅุถุงูุฉ ุงูุฃุนูุฏุฉ ุงูุฌุฏูุฏุฉ ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
            db.run(`ALTER TABLE orders ADD COLUMN customer_name TEXT`, (err) => {
                if (err && !err.message.includes('duplicate column name')) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ customer_name:', err);
                }
            });
            db.run(`ALTER TABLE orders ADD COLUMN customer_phone TEXT`, (err) => {
                if (err && !err.message.includes('duplicate column name')) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ customer_phone:', err);
                }
            });
            db.run(`ALTER TABLE orders ADD COLUMN customer_email TEXT`, (err) => {
                if (err && !err.message.includes('duplicate column name')) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ customer_email:', err);
                }
            });
        }
    });

    // ุฌุฏูู ุชูุงุตูู ุงูุทูุจุงุช
    db.run(`CREATE TABLE IF NOT EXISTS order_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        price REAL,
        product_name TEXT,
        FOREIGN KEY (order_id) REFERENCES orders (id),
        FOREIGN KEY (product_id) REFERENCES products (id)
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุชูุงุตูู ุงูุทูุจุงุช:', err);
        else {
            console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุชูุงุตูู ุงูุทูุจุงุช');
            // ุฅุถุงูุฉ ุนููุฏ ุงุณู ุงูููุชุฌ ุฅุฐุง ูู ููู ููุฌูุฏุงู
            db.run(`ALTER TABLE order_items ADD COLUMN product_name TEXT`, (err) => {
                if (err && !err.message.includes('duplicate column name')) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ product_name:', err);
                }
            });
        }
    });

    // ุฌุฏูู ุงููุฑุงุฌุนุงุช ูุงูุชููููุงุช
    db.run(`CREATE TABLE IF NOT EXISTS reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        customer_name TEXT NOT NULL,
        customer_email TEXT,
        rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
        comment TEXT,
        order_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_approved BOOLEAN DEFAULT 0,
        FOREIGN KEY (order_id) REFERENCES orders (id)
    )`, (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏูู ุงููุฑุงุฌุนุงุช:', err);
        else console.log('ุชู ุฅูุดุงุก ุฌุฏูู ุงููุฑุงุฌุนุงุช');
    });

    // ุญุฐู ุฌููุน ุงูููุชุฌุงุช ุงูููุฌูุฏุฉ
    db.run('DELETE FROM products', (err) => {
        if (err) console.error('ุฎุทุฃ ูู ุญุฐู ุงูููุชุฌุงุช:', err);
        else console.log('ุชู ุญุฐู ุฌููุน ุงูููุชุฌุงุช ุงูููุฌูุฏุฉ');
    });
}

// ุฅุฏุฑุงุฌ ุงูููุชุฌุงุช ุงูุฌุฏูุฏุฉ
function insertNewProducts() {
    console.log('ุฅุถุงูุฉ ุงูููุชุฌุงุช ุงูุฌุฏูุฏุฉ...');
    
    const newProducts = [
        {
            name: 'ุจุตู ูุตุฑู',
            description: 'ุจุตู ูุตุฑู ุทุงุฒุฌ ุนุงูู ุงูุฌูุฏุฉ',
            price: 700.00,
            image_url: '/images/onion.jpg',
            category: 'ุฎุถุฑูุงุช',
            stock_quantity: 100,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุจูููู ุนุงุฏู',
            description: 'ุจูููู ุนุงุฏู ุทุงุฒุฌ',
            price: 300.00,
            image_url: '/images/olive-regular.jpg',
            category: 'ุฒูุชูู',
            stock_quantity: 80,
            origin: 'ูุตุฑ',
            quality_grade: 'ุนุงุฏู',
            weight_kg: 10.0
        },
        {
            name: 'ุจูููู ูุงุฎุฑ',
            description: 'ุจูููู ูุงุฎุฑ ุนุงูู ุงูุฌูุฏุฉ',
            price: 400.00,
            image_url: '/images/olive-premium.jpg',
            category: 'ุฒูุชูู',
            stock_quantity: 60,
            origin: 'ูุตุฑ',
            quality_grade: 'ูุงุฎุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุญูุงุฑ ูุดู ูุตุฑู',
            description: 'ุฎูุงุฑ ูุดู ูุตุฑู ุทุงุฒุฌ',
            price: 715.00,
            image_url: '/images/cucumber-egyptian.jpg',
            category: 'ุฎุถุฑูุงุช',
            stock_quantity: 90,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฎูุงุฑ ูููู ุณููู',
            description: 'ุฎูุงุฑ ูููู ุณููู ุทุงุฒุฌ',
            price: 500.00,
            image_url: '/images/cucumber-whole.jpg',
            category: 'ุฎุถุฑูุงุช',
            stock_quantity: 70,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฎูุงุฑ ูุดู ูุณุชูุฑุฏ',
            description: 'ุฎูุงุฑ ูุดู ูุณุชูุฑุฏ ุนุงูู ุงูุฌูุฏุฉ',
            price: 2400.00,
            image_url: '/images/cucumber-imported.jpg',
            category: 'ุฎุถุฑูุงุช',
            stock_quantity: 40,
            origin: 'ูุณุชูุฑุฏ',
            quality_grade: 'ูุงุฎุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุฎุถุฑ ุณููู',
            description: 'ุฒูุชูู ุฃุฎุถุฑ ุณููู ุทุงุฒุฌ',
            price: 1300.00,
            image_url: '/images/green-olives-whole.jpg',
            category: 'ุฒูุชูู ุฃุฎุถุฑ',
            stock_quantity: 100,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุฎุถุฑ ุดุฑุงุฆุญ',
            description: 'ุฒูุชูู ุฃุฎุถุฑ ููุทุน ุดุฑุงุฆุญ',
            price: 1500.00,
            image_url: '/images/green-olives-sliced.jpg',
            category: 'ุฒูุชูู ุฃุฎุถุฑ',
            stock_quantity: 80,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุฎุถุฑ ูุญุดู ุฌุฒุฑ',
            description: 'ุฒูุชูู ุฃุฎุถุฑ ูุญุดู ุจุงูุฌุฒุฑ',
            price: 1600.00,
            image_url: '/images/green-olives-carrot.jpg',
            category: 'ุฒูุชูู ูุญุดู',
            stock_quantity: 60,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุณุจุงูู ุฌุงูุจู',
            description: 'ุฒูุชูู ุฅุณุจุงูู ุฌุงูุจู ูุจูุฑ ุงูุญุฌู',
            price: 1700.00,
            image_url: '/images/spanish-olives-jumbo.jpg',
            category: 'ุฒูุชูู ุฃุฎุถุฑ',
            stock_quantity: 50,
            origin: 'ุฅุณุจุงููุง',
            quality_grade: 'ูุงุฎุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุณุจุงูู ุณูุจุฑ',
            description: 'ุฒูุชูู ุฅุณุจุงูู ุณูุจุฑ ุนุงูู ุงูุฌูุฏุฉ',
            price: 1800.00,
            image_url: '/images/spanish-olives-super.jpg',
            category: 'ุฒูุชูู ุฃุฎุถุฑ',
            stock_quantity: 45,
            origin: 'ุฅุณุจุงููุง',
            quality_grade: 'ุณูุจุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุณูุฏ ุดุฑุงุฆุญ',
            description: 'ุฒูุชูู ุฃุณูุฏ ููุทุน ุดุฑุงุฆุญ',
            price: 1400.00,
            image_url: '/images/black-olives-sliced.jpg',
            category: 'ุฒูุชูู ุฃุณูุฏ',
            stock_quantity: 70,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุงุณูุฏ ุดุฑุงุฆุญ ุทุจูุนู',
            description: 'ุฒูุชูู ุฃุณูุฏ ุดุฑุงุฆุญ ุทุจูุนู ุจุฏูู ุฅุถุงูุงุช',
            price: 1800.00,
            image_url: '/images/black-olives-natural.jpg',
            category: 'ุฒูุชูู ุฃุณูุฏ',
            stock_quantity: 60,
            origin: 'ูุตุฑ',
            quality_grade: 'ุทุจูุนู',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ุฏููุณู',
            description: 'ุฒูุชูู ุฏููุณู ุญูู ุงููุฐุงู',
            price: 1400.00,
            image_url: '/images/dolce-olives.jpg',
            category: 'ุฒูุชูู',
            stock_quantity: 55,
            origin: 'ุฅูุทุงููุง',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ูุงูุงูุงุชุง ุฌุงูุจู',
            description: 'ุฒูุชูู ูุงูุงูุงุชุง ุฌุงูุจู ูุจูุฑ ุงูุญุฌู',
            price: 2000.00,
            image_url: '/images/kalamata-jumbo.jpg',
            category: 'ุฒูุชูู ุฃุณูุฏ',
            stock_quantity: 40,
            origin: 'ุงููููุงู',
            quality_grade: 'ูุงุฎุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ูุงูุงูุงุชุง ุณูุจุฑ',
            description: 'ุฒูุชูู ูุงูุงูุงุชุง ุณูุจุฑ ุนุงูู ุงูุฌูุฏุฉ',
            price: 2300.00,
            image_url: '/images/kalamata-super.jpg',
            category: 'ุฒูุชูู ุฃุณูุฏ',
            stock_quantity: 35,
            origin: 'ุงููููุงู',
            quality_grade: 'ุณูุจุฑ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ูุงูุงูุงุชุง ูุดุฑุญ ุฒูุช',
            description: 'ุฒูุชูู ูุงูุงูุงุชุง ูุดุฑุญ ุจุงูุฒูุช',
            price: 2500.00,
            image_url: '/images/kalamata-oil.jpg',
            category: 'ุฒูุชูู ุฃุณูุฏ',
            stock_quantity: 30,
            origin: 'ุงููููุงู',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ูุดูู',
            description: 'ุฒูุชูู ูุดูู ุจูููุฉ ูููุฒุฉ',
            price: 2000.00,
            image_url: '/images/grilled-olives.jpg',
            category: 'ุฒูุชูู',
            stock_quantity: 45,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ุฒูุชูู ููุฏุบ ุฒูุช',
            description: 'ุฒูุชูู ููุฏุบ ุจุงูุฒูุช',
            price: 1900.00,
            image_url: '/images/oil-cured-olives.jpg',
            category: 'ุฒูุชูู',
            stock_quantity: 50,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ูููู ุจูุฏู ุทูุทุงูู',
            description: 'ูููู ุจูุฏู ุทูุทุงูู ุญุงุฑ',
            price: 350.00,
            image_url: '/images/pepper-local.jpg',
            category: 'ูููู',
            stock_quantity: 70,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ูููู ููุณููู',
            description: 'ูููู ููุณููู ุญุงุฑ',
            price: 450.00,
            image_url: '/images/pepper-mexican.jpg',
            category: 'ูููู',
            stock_quantity: 80,
            origin: 'ุงูููุณูู',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ูููู ูุงูุจููู ุงุญูุฑ ูุงุฎุถุฑ',
            description: 'ูููู ูุงูุจููู ุฃุญูุฑ ูุฃุฎุถุฑ ุญุงุฑ',
            price: 400.00,
            image_url: '/images/jalapeno-pepper.jpg',
            category: 'ูููู',
            stock_quantity: 60,
            origin: 'ุงูููุณูู',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ูููุณ ุณุงุฏู ูุฎูุทู',
            description: 'ูููุณ ุณุงุฏุฉ ูุฎูุทุฉ ูุชููุนุฉ',
            price: 250.00,
            image_url: '/images/lux-mix.jpg',
            category: 'ูุฎููุงุช',
            stock_quantity: 90,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        },
        {
            name: 'ููููู ูุฒุจุฏ',
            description: 'ููููู ูุฒุจุฏ ุทุงุฒุฌ',
            price: 250.00,
            image_url: '/images/pickled-lemon.jpg',
            category: 'ูุฎููุงุช',
            stock_quantity: 85,
            origin: 'ูุตุฑ',
            quality_grade: 'ููุชุงุฒ',
            weight_kg: 10.0
        }
    ];

    newProducts.forEach(product => {
        db.run(`INSERT INTO products (name, description, price, image_url, category, stock_quantity, origin, quality_grade, weight_kg) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [product.name, product.description, product.price, product.image_url, product.category, product.stock_quantity, product.origin, product.quality_grade, product.weight_kg],
            function(err) {
                if (err) {
                    console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุชุฌ:', product.name, err);
                } else {
                    console.log('ุชู ุฅุถุงูุฉ ุงูููุชุฌ:', product.name);
                }
            });
    });
}

// ุงุณุชุฏุนุงุก ุฏุงูุฉ ุฅุถุงูุฉ ุงูููุชุฌุงุช ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุจุฏุก ุงูุฎุงุฏู
insertNewProducts();

// Middleware ููุชุญูู ูู ุงูุฑูุฒ ุงููููุฒ
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: 'ุงูุฑูุฒ ุงููููุฒ ูุทููุจ' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: 'ุฑูุฒ ูููุฒ ุบูุฑ ุตุงูุญ' });
        }
        req.user = user;
        next();
    });
}

// Routes

// ุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏ
app.post('/api/register', async (req, res) => {
    const { username, email, password, full_name, phone, address } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        
        db.run(`INSERT INTO users (username, email, password, full_name, phone, address) 
                VALUES (?, ?, ?, ?, ?, ?)`,
            [username, email, hashedPassword, full_name, phone, address],
            function(err) {
                if (err) {
                    return res.status(400).json({ error: 'ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ' });
                }
                res.json({ message: 'ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ', userId: this.lastID });
            });
    } catch (error) {
        res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุฎุงุฏู' });
    }
});

// ุชุณุฌูู ุงูุฏุฎูู
app.post('/api/login', (req, res) => {
    const { email, password } = req.body;

    db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุฎุงุฏู' });
        }

        if (!user) {
            return res.status(401).json({ error: 'ุจูุงูุงุช ุฏุฎูู ุบูุฑ ุตุญูุญุฉ' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(401).json({ error: 'ุจูุงูุงุช ุฏุฎูู ุบูุฑ ุตุญูุญุฉ' });
        }

        const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET);
        res.json({ token, user: { id: user.id, username: user.username, email: user.email, full_name: user.full_name } });
    });
});

// ุงูุญุตูู ุนูู ุฌููุน ุงูููุชุฌุงุช
app.get('/api/products', (req, res) => {
    db.all('SELECT * FROM products ORDER BY created_at DESC', (err, products) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูููุชุฌุงุช' });
        }
        res.json(products);
    });
});

// ุงูุญุตูู ุนูู ููุชุฌ ูุงุญุฏ
app.get('/api/products/:id', (req, res) => {
    const { id } = req.params;
    
    db.get('SELECT * FROM products WHERE id = ?', [id], (err, product) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูููุชุฌ' });
        }
        if (!product) {
            return res.status(404).json({ error: 'ุงูููุชุฌ ุบูุฑ ููุฌูุฏ' });
        }
        res.json(product);
    });
});

// ุฅุถุงูุฉ ููุชุฌ ุฅูู ุงูุณูุฉ
app.post('/api/cart/add', authenticateToken, (req, res) => {
    const { product_id, quantity = 1 } = req.body;
    const user_id = req.user.userId;

    // ุงูุชุญูู ูู ูุฌูุฏ ุงูููุชุฌ ูู ุงูุณูุฉ
    db.get('SELECT * FROM cart WHERE user_id = ? AND product_id = ?', [user_id, product_id], (err, existingItem) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุฎุงุฏู' });
        }

        if (existingItem) {
            // ุชุญุฏูุซ ุงููููุฉ
            db.run('UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?',
                [quantity, user_id, product_id], (err) => {
                    if (err) {
                        return res.status(500).json({ error: 'ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุณูุฉ' });
                    }
                    res.json({ message: 'ุชู ุชุญุฏูุซ ุงูุณูุฉ ุจูุฌุงุญ' });
                });
        } else {
            // ุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏ
            db.run('INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)',
                [user_id, product_id, quantity], (err) => {
                    if (err) {
                        return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุชุฌ ููุณูุฉ' });
                    }
                    res.json({ message: 'ุชู ุฅุถุงูุฉ ุงูููุชุฌ ููุณูุฉ ุจูุฌุงุญ' });
                });
        }
    });
});

// ุงูุญุตูู ุนูู ูุญุชููุงุช ุงูุณูุฉ
app.get('/api/cart', authenticateToken, (req, res) => {
    const user_id = req.user.userId;

    db.all(`SELECT c.*, p.name, p.price, p.image_url 
            FROM cart c 
            JOIN products p ON c.product_id = p.id 
            WHERE c.user_id = ?`, [user_id], (err, cartItems) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูุณูุฉ' });
        }
        res.json(cartItems);
    });
});

// ุชุญุฏูุซ ูููุฉ ููุชุฌ ูู ุงูุณูุฉ
app.put('/api/cart/:id', authenticateToken, (req, res) => {
    const { id } = req.params;
    const { quantity } = req.body;
    const user_id = req.user.userId;

    db.run('UPDATE cart SET quantity = ? WHERE id = ? AND user_id = ?',
        [quantity, id, user_id], (err) => {
            if (err) {
                return res.status(500).json({ error: 'ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุณูุฉ' });
            }
            res.json({ message: 'ุชู ุชุญุฏูุซ ุงููููุฉ ุจูุฌุงุญ' });
        });
});

// ุญุฐู ููุชุฌ ูู ุงูุณูุฉ
app.delete('/api/cart/:id', authenticateToken, (req, res) => {
    const { id } = req.params;
    const user_id = req.user.userId;

    db.run('DELETE FROM cart WHERE id = ? AND user_id = ?', [id, user_id], (err) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุญุฐู ุงูููุชุฌ' });
        }
        res.json({ message: 'ุชู ุญุฐู ุงูููุชุฌ ูู ุงูุณูุฉ' });
    });
});

// ุฅุฑุณุงู ุทูุจ ุฌุฏูุฏ ุนุจุฑ ุงูุฅูููู (ูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ)
app.post('/api/send-order-email', async (req, res) => {
    try {
        const orderData = req.body;
        
        // ุงูุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช ุงููุทููุจุฉ
        if (!orderData.id || !orderData.customerName || !orderData.items || !orderData.total) {
            return res.status(400).json({ error: 'ุจูุงูุงุช ุงูุทูุจ ุบูุฑ ููุชููุฉ' });
        }

        // ุชุญุถูุฑ ุจูุงูุงุช ุงูุทูุจ ููุฅูููู
        const emailOrderData = {
            id: orderData.id,
            created_at: orderData.date || new Date().toISOString(),
            customer_name: orderData.customerName,
            customer_email: orderData.customerEmail || 'ุบูุฑ ูุญุฏุฏ',
            customer_phone: orderData.customerPhone || 'ุบูุฑ ูุญุฏุฏ',
            shipping_address: orderData.shippingAddress || 'ุบูุฑ ูุญุฏุฏ',
            total_amount: orderData.total,
            payment_method: orderData.paymentMethod || 'ุบูุฑ ูุญุฏุฏ',
            items: orderData.items.map(item => ({
                name: item.name,
                quantity: item.quantity,
                price: item.price
            }))
        };

        // ุฅุฑุณุงู ุงูุฅูููู
        const emailSent = await sendOrderEmail(emailOrderData);
        
        if (emailSent) {
            res.json({ 
                success: true, 
                message: 'ุชู ุฅุฑุณุงู ุงูุทูุจ ุจูุฌุงุญ ุฅูู ุงูุฅูููู' 
            });
        } else {
            res.status(500).json({ 
                success: false, 
                error: 'ูุดู ูู ุฅุฑุณุงู ุงูุฅูููู' 
            });
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุทูุจ:', error);
        res.status(500).json({ 
            success: false, 
            error: 'ุฎุทุฃ ูู ุงูุฎุงุฏู' 
        });
    }
});

// ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ ูููุณุชุฎุฏููู ุงููุณุฌููู
app.post('/api/orders', authenticateToken, (req, res) => {
    const { payment_method, shipping_address } = req.body;
    const user_id = req.user.userId;

    // ุญุณุงุจ ุงููุฌููุน ุงูููู
    db.all(`SELECT c.*, p.price 
            FROM cart c 
            JOIN products p ON c.product_id = p.id 
            WHERE c.user_id = ?`, [user_id], (err, cartItems) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูุณูุฉ' });
        }

        if (cartItems.length === 0) {
            return res.status(400).json({ error: 'ุงูุณูุฉ ูุงุฑุบุฉ' });
        }

        const total_amount = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);

        // ุฅูุดุงุก ุงูุทูุจ
        db.run(`INSERT INTO orders (user_id, total_amount, payment_method, shipping_address) 
                VALUES (?, ?, ?, ?)`,
            [user_id, total_amount, payment_method, shipping_address],
            function(err) {
                if (err) {
                    return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทูุจ' });
                }

                const order_id = this.lastID;

                // ุฅุถุงูุฉ ุชูุงุตูู ุงูุทูุจ
                const orderItemsPromises = cartItems.map(item => {
                    return new Promise((resolve, reject) => {
                        db.run(`INSERT INTO order_items (order_id, product_id, quantity, price) 
                                VALUES (?, ?, ?, ?)`,
                            [order_id, item.product_id, item.quantity, item.price],
                            (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                    });
                });

                Promise.all(orderItemsPromises)
                    .then(() => {
                        // ูุณุญ ุงูุณูุฉ
                        db.run('DELETE FROM cart WHERE user_id = ?', [user_id], (err) => {
                            if (err) {
                                console.error('ุฎุทุฃ ูู ูุณุญ ุงูุณูุฉ:', err);
                            }
                            res.json({ 
                                message: 'ุชู ุฅูุดุงุก ุงูุทูุจ ุจูุฌุงุญ', 
                                order_id: order_id,
                                total_amount: total_amount 
                            });
                        });
                    })
                    .catch(err => {
                        res.status(500).json({ error: 'ุฎุทุฃ ูู ุญูุธ ุชูุงุตูู ุงูุทูุจ' });
                    });
            });
    });
});

// ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ ูููุณุชุฎุฏููู ุบูุฑ ุงููุณุฌููู
app.post('/api/orders/guest', (req, res) => {
    const { 
        customer_name, 
        customer_phone, 
        customer_email, 
        shipping_address, 
        payment_method, 
        items 
    } = req.body;

    if (!customer_name || !customer_phone || !items || items.length === 0) {
        return res.status(400).json({ error: 'ุจูุงูุงุช ุงูุทูุจ ุบูุฑ ููุชููุฉ' });
    }

    // ุญุณุงุจ ุงููุฌููุน ุงูููู
    const total_amount = items.reduce((total, item) => total + (item.price * item.quantity), 0);

    // ุฅูุดุงุก ุงูุทูุจ
    db.run(`INSERT INTO orders (user_id, total_amount, payment_method, shipping_address, customer_name, customer_phone, customer_email) 
            VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [null, total_amount, payment_method, shipping_address, customer_name, customer_phone, customer_email],
        function(err) {
            if (err) {
                console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุทูุจ ุงูุถูู:', err);
                return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทูุจ' });
            }

            const order_id = this.lastID;

            // ุฅุถุงูุฉ ุชูุงุตูู ุงูุทูุจ
            const orderItemsPromises = items.map(item => {
                return new Promise((resolve, reject) => {
                    // ุงูุจุญุซ ุนู ุงูููุชุฌ ููุญุตูู ุนูู product_id
                    db.get('SELECT id FROM products WHERE name = ?', [item.name], (err, product) => {
                        if (err) {
                            reject(err);
                            return;
                        }

                        const product_id = product ? product.id : null;
                        
                        db.run(`INSERT INTO order_items (order_id, product_id, quantity, price, product_name) 
                                VALUES (?, ?, ?, ?, ?)`,
                            [order_id, product_id, item.quantity, item.price, item.name],
                            (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                    });
                });
            });

            Promise.all(orderItemsPromises)
                .then(() => {
                    res.json({ 
                        message: 'ุชู ุฅูุดุงุก ุงูุทูุจ ุจูุฌุงุญ', 
                        order_id: order_id,
                        total_amount: total_amount 
                    });
                })
                .catch(err => {
                    console.error('ุฎุทุฃ ูู ุญูุธ ุชูุงุตูู ุทูุจ ุงูุถูู:', err);
                    res.status(500).json({ error: 'ุฎุทุฃ ูู ุญูุธ ุชูุงุตูู ุงูุทูุจ' });
                });
        });
});

// ุงูุญุตูู ุนูู ุทูุจุงุช ุงููุณุชุฎุฏู ุงููุณุฌู
app.get('/api/orders', authenticateToken, (req, res) => {
    const user_id = req.user.userId;

    const query = `
        SELECT o.*, 
               COALESCE(o.customer_name, u.full_name) as customer_name,
               COALESCE(o.customer_phone, u.phone) as customer_phone,
               COALESCE(o.customer_email, u.email) as customer_email
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        WHERE o.user_id = ? 
        ORDER BY o.created_at DESC
    `;

    db.all(query, [user_id], (err, orders) => {
        if (err) {
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช' });
        }

        // ุฌูุจ ุชูุงุตูู ุงูููุชุฌุงุช ููู ุทูุจ
        const ordersWithItems = orders.map(order => {
            return new Promise((resolve, reject) => {
                const itemsQuery = `
                    SELECT 
                        oi.*,
                        COALESCE(oi.product_name, p.name) as product_name
                    FROM order_items oi
                    LEFT JOIN products p ON oi.product_id = p.id
                    WHERE oi.order_id = ?
                `;

                db.all(itemsQuery, [order.id], (err, items) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve({
                            ...order,
                            items: items.map(item => ({
                                name: item.product_name,
                                quantity: item.quantity,
                                price: item.price
                            }))
                        });
                    }
                });
            });
        });

        Promise.all(ordersWithItems)
            .then(ordersData => {
                res.json(ordersData);
            })
            .catch(error => {
                console.error('ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช:', error);
                res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช' });
            });
    });
});

// ุงูุญุตูู ุนูู ุทูุจุงุช ุงูุนููู ุจูุงุกู ุนูู ุฑูู ุงููุงุชู ุฃู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู (ููุถููู)
app.post('/api/orders/search', (req, res) => {
    const { phone, email } = req.body;

    if (!phone && !email) {
        return res.status(400).json({ error: 'ูุฌุจ ุชูููุฑ ุฑูู ุงููุงุชู ุฃู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู' });
    }

    let query = `
        SELECT o.*, 
               COALESCE(o.customer_name, u.full_name) as customer_name,
               COALESCE(o.customer_phone, u.phone) as customer_phone,
               COALESCE(o.customer_email, u.email) as customer_email
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        WHERE 
    `;
    
    const params = [];
    const conditions = [];

    if (phone) {
        conditions.push('(o.customer_phone = ? OR u.phone = ?)');
        params.push(phone, phone);
    }

    if (email) {
        conditions.push('(o.customer_email = ? OR u.email = ?)');
        params.push(email, email);
    }

    query += conditions.join(' OR ');
    query += ' ORDER BY o.created_at DESC';

    db.all(query, params, (err, orders) => {
        if (err) {
            console.error('ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูุทูุจุงุช:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูุทูุจุงุช' });
        }

        // ุฌูุจ ุชูุงุตูู ุงูููุชุฌุงุช ููู ุทูุจ
        const ordersWithItems = orders.map(order => {
            return new Promise((resolve, reject) => {
                const itemsQuery = `
                    SELECT 
                        oi.*,
                        COALESCE(oi.product_name, p.name) as product_name
                    FROM order_items oi
                    LEFT JOIN products p ON oi.product_id = p.id
                    WHERE oi.order_id = ?
                `;

                db.all(itemsQuery, [order.id], (err, items) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve({
                            ...order,
                            items: items.map(item => ({
                                name: item.product_name,
                                quantity: item.quantity,
                                price: item.price
                            }))
                        });
                    }
                });
            });
        });

        Promise.all(ordersWithItems)
            .then(ordersData => {
                res.json(ordersData);
            })
            .catch(error => {
                console.error('ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช:', error);
                res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช' });
            });
    });
});

// ===== API endpoints ููุฅุฏุงุฑุฉ =====

// ุงูุญุตูู ุนูู ุฌููุน ุงูุทูุจุงุช ููุฅุฏุงุฑุฉ
app.get('/api/admin/orders', (req, res) => {
    const query = `
        SELECT 
            o.*,
            COALESCE(o.customer_name, u.full_name) as customer_name,
            COALESCE(o.customer_phone, u.phone) as customer_phone,
            COALESCE(o.customer_email, u.email) as customer_email
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        ORDER BY o.created_at DESC
    `;

    db.all(query, [], (err, orders) => {
        if (err) {
            console.error('ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช ููุฅุฏุงุฑุฉ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช' });
        }

        // ุฌูุจ ุชูุงุตูู ุงูููุชุฌุงุช ููู ุทูุจ
        const ordersWithItems = orders.map(order => {
            return new Promise((resolve, reject) => {
                const itemsQuery = `
                    SELECT 
                        oi.*,
                        COALESCE(oi.product_name, p.name) as product_name
                    FROM order_items oi
                    LEFT JOIN products p ON oi.product_id = p.id
                    WHERE oi.order_id = ?
                `;

                db.all(itemsQuery, [order.id], (err, items) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve({
                            ...order,
                            items: items.map(item => ({
                                name: item.product_name,
                                quantity: item.quantity,
                                price: item.price
                            }))
                        });
                    }
                });
            });
        });

        Promise.all(ordersWithItems)
            .then(ordersData => {
                res.json(ordersData);
            })
            .catch(error => {
                console.error('ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช:', error);
                res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุทูุจุงุช' });
            });
    });
});

// ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ
app.put('/api/admin/orders/:id/status', (req, res) => {
    const { id } = req.params;
    const { status } = req.body;

    // ุงูุชุญูู ูู ุตุญุฉ ุงูุญุงูุฉ
    const validStatuses = ['pending', 'processing', 'completed', 'cancelled'];
    if (!validStatuses.includes(status)) {
        return res.status(400).json({ error: 'ุญุงูุฉ ุบูุฑ ุตุญูุญุฉ' });
    }

    db.run('UPDATE orders SET status = ? WHERE id = ?', [status, id], function(err) {
        if (err) {
            console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ' });
        }

        if (this.changes === 0) {
            return res.status(404).json({ error: 'ุงูุทูุจ ุบูุฑ ููุฌูุฏ' });
        }

        res.json({ message: 'ุชู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ุจูุฌุงุญ' });
    });
});

// ุญุฐู ุทูุจ
app.delete('/api/admin/orders/:id', (req, res) => {
    const { id } = req.params;

    // ุญุฐู ุชูุงุตูู ุงูุทูุจ ุฃููุงู
    db.run('DELETE FROM order_items WHERE order_id = ?', [id], (err) => {
        if (err) {
            console.error('ุฎุทุฃ ูู ุญุฐู ุชูุงุตูู ุงูุทูุจ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุญุฐู ุงูุทูุจ' });
        }

        // ุซู ุญุฐู ุงูุทูุจ
        db.run('DELETE FROM orders WHERE id = ?', [id], function(err) {
            if (err) {
                console.error('ุฎุทุฃ ูู ุญุฐู ุงูุทูุจ:', err);
                return res.status(500).json({ error: 'ุฎุทุฃ ูู ุญุฐู ุงูุทูุจ' });
            }

            if (this.changes === 0) {
                return res.status(404).json({ error: 'ุงูุทูุจ ุบูุฑ ููุฌูุฏ' });
            }

            res.json({ message: 'ุชู ุญุฐู ุงูุทูุจ ุจูุฌุงุญ' });
        });
    });
});

// ุฅุญุตุงุฆูุงุช ุงูุฅุฏุงุฑุฉ
app.get('/api/admin/stats', (req, res) => {
    const queries = {
        totalOrders: 'SELECT COUNT(*) as count FROM orders',
        pendingOrders: 'SELECT COUNT(*) as count FROM orders WHERE status = "pending"',
        completedOrders: 'SELECT COUNT(*) as count FROM orders WHERE status = "completed"',
        totalRevenue: 'SELECT SUM(total_amount) as total FROM orders WHERE status = "completed"'
    };

    const stats = {};
    const promises = Object.keys(queries).map(key => {
        return new Promise((resolve, reject) => {
            db.get(queries[key], [], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    stats[key] = row.count || row.total || 0;
                    resolve();
                }
            });
        });
    });

    Promise.all(promises)
        .then(() => {
            res.json(stats);
        })
        .catch(error => {
            console.error('ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช:', error);
            res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช' });
        });
});

// ===== API endpoints ูููุฑุงุฌุนุงุช =====

// ุฅุถุงูุฉ ูุฑุงุฌุนุฉ ุฌุฏูุฏุฉ
app.post('/api/reviews', (req, res) => {
    const { customer_name, customer_email, rating, comment, order_id } = req.body;

    // ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุทููุจุฉ
    if (!customer_name || !rating || rating < 1 || rating > 5) {
        return res.status(400).json({ error: 'ุงูุจูุงูุงุช ุงููุทููุจุฉ ุบูุฑ ููุชููุฉ ุฃู ุบูุฑ ุตุญูุญุฉ' });
    }

    const query = `
        INSERT INTO reviews (customer_name, customer_email, rating, comment, order_id)
        VALUES (?, ?, ?, ?, ?)
    `;

    db.run(query, [customer_name, customer_email, rating, comment, order_id], function(err) {
        if (err) {
            console.error('ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููุฑุงุฌุนุฉ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููุฑุงุฌุนุฉ' });
        }

        res.status(201).json({ 
            message: 'ุชู ุฅุถุงูุฉ ุงููุฑุงุฌุนุฉ ุจูุฌุงุญ ูุณุชุธูุฑ ุจุนุฏ ุงูููุงููุฉ ุนูููุง',
            reviewId: this.lastID 
        });
    });
});

// ุงูุญุตูู ุนูู ุงููุฑุงุฌุนุงุช ุงููุนุชูุฏุฉ
app.get('/api/reviews', (req, res) => {
    const query = `
        SELECT id, customer_name, rating, comment, created_at
        FROM reviews 
        WHERE is_approved = 1 
        ORDER BY created_at DESC
    `;

    db.all(query, [], (err, reviews) => {
        if (err) {
            console.error('ุฎุทุฃ ูู ุฌูุจ ุงููุฑุงุฌุนุงุช:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงููุฑุงุฌุนุงุช' });
        }

        res.json(reviews);
    });
});

// ุงูุญุตูู ุนูู ุฌููุน ุงููุฑุงุฌุนุงุช ููุฅุฏุงุฑุฉ
app.get('/api/admin/reviews', (req, res) => {
    const query = `
        SELECT r.*, o.id as order_number
        FROM reviews r
        LEFT JOIN orders o ON r.order_id = o.id
        ORDER BY r.created_at DESC
    `;

    db.all(query, [], (err, reviews) => {
        if (err) {
            console.error('ุฎุทุฃ ูู ุฌูุจ ุงููุฑุงุฌุนุงุช ููุฅุฏุงุฑุฉ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุฌูุจ ุงููุฑุงุฌุนุงุช' });
        }

        res.json(reviews);
    });
});

// ุงูููุงููุฉ ุนูู ูุฑุงุฌุนุฉ
app.put('/api/admin/reviews/:id/approve', (req, res) => {
    const { id } = req.params;

    db.run('UPDATE reviews SET is_approved = 1 WHERE id = ?', [id], function(err) {
        if (err) {
            console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุฑุงุฌุนุฉ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุฑุงุฌุนุฉ' });
        }

        if (this.changes === 0) {
            return res.status(404).json({ error: 'ุงููุฑุงุฌุนุฉ ุบูุฑ ููุฌูุฏุฉ' });
        }

        res.json({ message: 'ุชู ุงุนุชูุงุฏ ุงููุฑุงุฌุนุฉ ุจูุฌุงุญ' });
    });
});

// ุญุฐู ูุฑุงุฌุนุฉ
app.delete('/api/admin/reviews/:id', (req, res) => {
    const { id } = req.params;

    db.run('DELETE FROM reviews WHERE id = ?', [id], function(err) {
        if (err) {
            console.error('ุฎุทุฃ ูู ุญุฐู ุงููุฑุงุฌุนุฉ:', err);
            return res.status(500).json({ error: 'ุฎุทุฃ ูู ุญุฐู ุงููุฑุงุฌุนุฉ' });
        }

        if (this.changes === 0) {
            return res.status(404).json({ error: 'ุงููุฑุงุฌุนุฉ ุบูุฑ ููุฌูุฏุฉ' });
        }

        res.json({ message: 'ุชู ุญุฐู ุงููุฑุงุฌุนุฉ ุจูุฌุงุญ' });
    });
});

// ุตูุญุฉ ุงูุฅุฏุงุฑุฉ
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ุจุฏุก ุงูุฎุงุฏู
app.listen(PORT, () => {
    console.log(`ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ ${PORT}`);
    console.log(`ููููู ุฒูุงุฑุฉ ุงููููุน ุนูู: http://localhost:${PORT}`);
});

// ุฅุบูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุนูุฏ ุฅููุงู ุงูุฎุงุฏู
process.on('SIGINT', () => {
    db.close((err) => {
        if (err) {
            console.error(err.message);
        }
        console.log('ุชู ุฅุบูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
        process.exit(0);
    });
});